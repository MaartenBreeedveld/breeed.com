{"version":3,"sources":["components/ProductList.js","scenes/Home.js","components/helpers/MarkdownReader.js","scenes/Products.js","components/Header.js","App.js","serviceWorker.js","index.js","img/kast_img.jpg"],"names":["ProductList","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","src","image","id","sandbox","Component","Home","components_ProductList","MarkdownReader","_this","state","content","_this2","dataString","concat","process","Axios","get","then","res","data","setState","catch","err","console","error","react_markdown_default","source","escapeHtml","Products","query","undefined","qs","parse","window","location","search","ignoreQueryPrefix","MarkdownReader_MarkdownReader","Header","App","src_components_Header","react_router_dom","react_router","path","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"8PAmCeA,cA/Bb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAIN,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,IAAKC,OAEtCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,wBACAH,EAAAC,EAAAC,cAAA,4HAEAF,EAAAC,EAAAC,cAAA,qNAIAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKI,GAAG,uBACNN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeI,QAAQ,+CAA+CH,IAAI,0DAE9FJ,EAAAC,EAAAC,cAAA,oBA1BgBM,aCaXC,cAZb,SAAAA,EAAYhB,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,GAAAf,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAe,GAAAV,KAAAH,KACZH,0EAIN,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAD,cARWF,+CCCEG,cACnB,SAAAA,EAAYlB,GAAM,IAAAmB,EAAA,OAAAlB,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IAChBC,EAAAlB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAOH,KACFoB,MAAQ,CACXC,QAAS,IAHKF,mFAOE,IAAAG,EAAAnB,KACZoB,EAAU,GAAAC,OAAMC,cAAN,cAAAD,OAAyCrB,KAAKH,MAAMW,IAApD,OAChBe,IAAMC,IAAIJ,GAAYK,KAAK,SAACC,GAC1B,IAAMR,EAAUQ,EAAIC,KACpBR,EAAKS,SAAS,CAAEV,cACfW,MAAM,SAAAC,GACPC,QAAQC,MAAMF,sCAKhB,OACE1B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAU6B,OAAQlC,KAAKiB,MAAMC,QAASiB,YAAY,WApBZvB,8BCiB7BwB,cAhBb,SAAAA,EAAYvC,GAAO,IAAAmB,EAAA,OAAAlB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACjBpB,EAAAlB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMH,KACDwC,WAAQC,EAFItB,mFAMjBhB,KAAKqC,MAAQE,IAAGC,MAAMC,OAAOC,SAASC,OAAQ,CAAEC,mBAAmB,IAAQP,uCAI3E,OACEjC,EAAAC,EAAAC,cAACuC,EAAD,CAAgBrC,IAAK+B,IAAGC,MAAMC,OAAOC,SAASC,OAAQ,CAAEC,mBAAmB,IAAQP,eAZlEzB,aCqBRkC,6BArBb,SAAAA,EAAYjD,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,GAAAhD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KACZH,0EAIN,OACEO,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,SAEFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,sCAdSK,cCoBNmC,mLAdX,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxC,IACjCT,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,KAAK,YAAYE,UAAWjB,cAR7BxB,aCKE0C,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8abc28a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport image from '../img/kast_img.jpg'\r\n\r\nclass ProductList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <img className=\"product-image\" src={image} />\r\n          </div>\r\n          <div className=\"line-break\" />\r\n          <h1>Bookcase</h1>\r\n          <p className=\"paragraph-sub\">By Maarten Breedveld</p>\r\n          <p>The random dents and occasional paint splatters make it clear to see that it's materials had a 'previous life'.\r\n          </p>\r\n          <p>\r\n            In fact, it's previous life used to be the floor of the 'cinema room' of a good friend of this case's creator. Many good evenings were spent on this floor. \r\n            It would be a waste to erase those memories.\r\n          </p>\r\n          <div className=\"line-break\" />\r\n          <h2>3d viewer</h2>\r\n          <div id=\"holoscope-3d-viewer\">\r\n            <iframe className=\"three-viewer\" sandbox=\"allow-scripts allow-same-origin allow-popups\" src=\"http://localhost:3000/embed/5b7543dc2b6e101214785fbd\" ></iframe>\r\n          </div>\r\n          <br/>\r\n        </div>\r\n      </div>\r\n      )\r\n  }\r\n}\r\nexport default ProductList;","import React, { Component } from 'react';\r\nimport ProductList from '../components/ProductList';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ProductList />\r\n      </div>\r\n      )\r\n  }\r\n}\r\nexport default Home;","import React, { Component } from 'react';\r\nimport Markdown from 'react-markdown';\r\nimport Axios from 'axios';\r\n\r\nexport default class MarkdownReader extends Component {\r\n  constructor(props){\r\n    super (props) \r\n    this.state = {\r\n      content: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dataString = `${process.env.PUBLIC_URL}/markdown/${this.props.src}.md`;\r\n    Axios.get(dataString).then((res) => {\r\n      const content = res.data;\r\n      this.setState({ content });\r\n    }).catch(err => {\r\n      console.error(err)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Markdown source={this.state.content} escapeHtml={false} />\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport MarkdownReader from '../components/helpers/MarkdownReader';\r\nimport qs from 'qs';\r\n\r\nclass Products extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.query = undefined;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.query = qs.parse(window.location.search, { ignoreQueryPrefix: true }).query;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MarkdownReader src={qs.parse(window.location.search, { ignoreQueryPrefix: true }).query}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Products;","import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"container\">\r\n          <div className=\"navigation\" >\r\n            <div className=\"hamburger-menu\">\r\n              <i className=\"material-icons\">menu</i>\r\n            </div>\r\n            <h1 className=\"title-small\">Demo Page</h1>\r\n            <h1 className=\"title\">Cool Furniture Demo Page</h1>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Home from './scenes/Home';\r\nimport Products from './scenes/Products';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Router >\r\n          <div className=\"container\">\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/products\" component={Products} />\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/kast_img.dfdeac7b.jpg\";"],"sourceRoot":""}